{"version":3,"sources":["Meme/Meme.js","GeneratedMeme/GeneratedMeme.js","App/App.js","reportWebVitals.js","index.js"],"names":["axios","require","Meme","useState","memes","setMemes","idx","setIdx","captions","setCaptions","history","useHistory","useEffect","get","then","res","data","memes1","array","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","className","map","c","index","onChange","e","text","target","value","updateCaption","src","url","alt","onClick","currentMeme","formData","FormData","append","id","forEach","post","push","GeneratedMeme","copied","setCopied","clipboard","useClipboard","location","useLocation","URLSearchParams","search","copy","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.129db8db.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\nimport \"./styles.css\";\n\nconst axios = require(\"axios\");\n\nconst Meme = () => {\n    const [memes, setMemes] = useState([]);\n    const [idx, setIdx] = useState(0);\n    const [captions, setCaptions] = useState([]);\n    const history = useHistory();\n\n    const shuffleMemes = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    };\n\n    const handleSkip = () => {\n        setIdx(idx + 1);\n    };\n\n    const updateCaption = (e, index) => {\n        const text = e.target.value || '';\n        setCaptions(\n            captions.map((c, i) => {\n                if (i === index) return text;\n                else return c;\n            })\n        )\n    }\n\n    const generateMeme = () => {\n        const currentMeme = memes[idx];\n        const formData = new FormData();\n\n        formData.append('username', 'Champ007');\n        formData.append('password', 'Champ@007p');\n        formData.append('template_id', currentMeme.id);\n\n        captions.forEach((c, index) => {\n            formData.append(`boxes[${index}][text]`, c);\n        })\n\n        axios.post('https://api.imgflip.com/caption_image', formData)\n            .then(res => {\n                return res.data;\n            })\n            .then(res => {\n                history.push(`/generated?url=${res.data.url}`);\n            });\n\n    }\n\n    useEffect(() => {\n        axios\n            .get(\"https://api.imgflip.com/get_memes\")\n            .then((res) => {\n                return res.data;\n            })\n            .then((res) => {\n                const memes1 = res.data.memes;\n                shuffleMemes(memes1);\n                setMemes(memes1);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (memes.length) {\n            setCaptions(Array(memes[idx].box_count).fill(''));\n        }\n    }, [idx, memes]);\n\n    return (\n        <div className=\"container\">\n\n            {\n                captions.map((c, index) => (\n                    <input onChange={(e) => updateCaption(e, index)} key={index} />\n                ))\n            }\n            {memes.length && <img src={memes[idx].url} alt=\"meme-here\" />}\n\n            <br></br>\n            <button className=\"skip\" onClick={handleSkip}>\n                Skip\n            </button>\n\n            <button onClick={generateMeme} className=\"generate\">\n                Generate\n            </button>\n        </div>\n    );\n};\n\nexport default Meme;\n","import \"./styles.css\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useClipboard } from \"use-clipboard-copy\";\nimport { useState } from \"react\";\n\nconst GeneratedMeme = () => {\n    const [copied, setCopied] = useState(false);\n\n    const clipboard = useClipboard();\n    const history = useHistory();\n    const location = useLocation();\n    const url = new URLSearchParams(location.search).get('url');\n\n    //   console.log(url);\n\n    const handleClick = () => {\n        history.push(\"/\");\n    };\n\n    const copyLink = () => {\n        clipboard.copy(url);\n        setCopied(true);\n    };\n\n    return (\n        <div className=\"container\">\n            <button onClick={handleClick} className=\"home\">\n                Make More...\n            </button>\n            {url && <img src={url} alt=\"generated-meme\" />}\n            <button className=\"copy\" onClick={copyLink}>\n                {copied ? \"Link Copied\" : \"Copy Link\"}\n            </button>\n        </div>\n    );\n};\n\nexport default GeneratedMeme;\n","// import styles from './styles.modules.css'\nimport Meme from '../Meme/Meme';\nimport GeneratedMeme from '../GeneratedMeme/GeneratedMeme';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <>\n      <h1>Meme Generator</h1>\n      <Switch>\n        <Route exact path=\"/\">\n          <Meme />\n        </Route>\n        <Route path=\"/generated\">\n          <GeneratedMeme />\n        </Route>\n        <Route path=\"*\">\n          <Meme />\n      </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}